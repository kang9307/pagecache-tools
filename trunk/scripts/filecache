#!/usr/bin/ruby -w

require 'optparse'
require 'ostruct'
require 'fileutils'
require 'cachedfiles'


$cfiles = nil

opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.separator ""
  opts.separator "Available options:"


  opts.on("-s", "--snapshot [CONDITION]", "take snapshot of /proc/filecache with pages satisfy the CONDITION.") do |condition|
    $cfiles = CachedFileList.new
    $cfiles.snapshot do |idx, len, state, refcnt|
      if condition == nil or condition.empty?
        true
      else
        eval condition 
      end
    end
  end

  opts.on("-r", "--restore SRC", "restore the pre-saved snapshot from SRC file/dir.") do |src|
    $cfiles = CachedFileList.restore src
  end

  opts.on("-d", "--dump DST", "dump the snapshot to the DST dir.") do |dst|
    Dir.mkdir(dst) if !FileTest.exist?(dst)
    $cfiles.dump dst
  end

  opts.on("-u", "--union SRC", "the set union.") do |src|
    $cfiles.union CachedFileList.restore(src) 
  end

  opts.on("-i", "--intersection SRC", "the set intersect between pre-snapshort and SRC.") do |src|
    $cfiles.intersection CachedFileList.restore(src) 
  end

  opts.on("-f", "--difference SRC", "the set difference between pre-snapshort and SRC.") do |src|
    $cfiles.difference CachedFileList.restore(src) 
  end

  opts.on("-F", "--rdifference SRC", "the set difference between pre-snapshort and SRC.") do |src|
    $cfiles = CachedFileList.restore(src).difference $cfiles
  end

  opts.on("--prune-path PATTERN", "exclude files matching PATTERN.") do |pattern| 
		p = Regexp.new(pattern)
    $cfiles.delete_if do |cf|
	    if p =~ cf.file
		    true
	    else
		    false
	    end
    end
  end

  opts.on("--delete-if CONDITION", "delete files satisfying CONDITION.") do |condition| 
    $cfiles.delete_if do |cf|
      if cf.seq == 0 # protect the block device file
        false
      else
        eval condition 
      end
    end
  end

  opts.on("--defrag HABITAT", "do poor man's defrag via dir HABITAT.") do |habitat| 

		if not 'Ss016'.include? `runlevel`[2]
			puts 'WARNING: defraging in multi-user mode may lead to data corruption. Continue anyway? [y/N]'
			if readline[0] != ?y then return end
		end

		mtab = FSTab.new '/etc/mtab'
    $cfiles.each do |f|
			# skip obscure files
			fstat = File.lstat f.file
      next if fstat.file?

			# skip opened files
			File.open(f.file) do |f|
				if not f.flock(File::LOCK_EX | File::LOCK_NB)
					puts "skiping opened file #{f.file}"
					next
				end
				f.flock(File::LOCK_UN)
			end

			# poor man's defrag ;-)
			tmpfile = mtab[f.dev].mount_point + '/' + habitat + '/' + File.basename(f.file)
			begin
				FileUtils.cp f.file, tmpfile, :preserve => true
				tstat = File.lstat tmpfile
				raise "not in same filesystem" if fstat.dev != tstat.dev
				raise "file changed" if fstat.size != tstat.size or
																fstat.mode != tstat.mode or
																fstat.mtime != tstat.mtime
				FileUtils.rm f.file
				FileUtils.ln tmpfile, f.file
				FileUtils.rm tmpfile
			rescue Exception => msg
				$stderr.puts "Failed to defrag file #{f.file} => #{tmpfile}: #{msg}."
				exit 1
			end
    end
  end

  opts.on_tail("-h", "--help", "Show this message.") do
    puts opts
  end
end

begin
  opts.parse(ARGV)
# rescue NoMethodError => err 
#   puts "May not specify the option '--restore/--snapshot'."
#   puts
  # puts opts
rescue => err
  puts err.backtrace
  $stderr.puts "#{err}\n"
end

# vim: sw=2 ts=2
