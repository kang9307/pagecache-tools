#!/bin/sh

VERBOSE=0
CACHE_ROOT=/var/cache/bootcache
. /etc/default/bootcache

FILECACHE=filecache
RAFS=readahead-fs.sh
PATH=.:$PATH

task=${2:-boot}
task_root="$CACHE_ROOT/$task"
[ ! -d $task_root ] && mkdir -p $task_root

function print_help()
{
    echo "Usage: $0 start/stop/preload/defrag/defrag-now <task>"
}

function rotate_snapshots()
{
    [ -e $1/snapshot2 ] && rm -fr $1/snapshot2
    [ -e $1/snapshot1 ] && mv $1/snapshot1 $1/snapshot2
    [ -e $1/snapshot0 ] && mv $1/snapshot0 $1/snapshot1
}

function start()
{
    rotate_snapshots $task_root 

    $FILECACHE --snapshot --dump "$task_root/snapshot0/start"
}

function stop()
{
    $FILECACHE --snapshot --dump "$task_root/snapshot0/stop"
    $FILECACHE --restore "$task_root/snapshot0/stop" \
					--difference "$task_root/snapshot0/start" \
					--dump "$task_root/preload" 
}


# function save_queue
# {
#     QUEUES=`echo /sys/block/*/queue`
#     for QUEUE in $QUEUE
#     do
#         SCHEDULER=`cat $QUEUE/scheduler | sed -e "s/^.*\[\(.*\)\].*$/\1/g"`
#         NR_REQUESTS=`cat $QUEUE/nr_requests`
#         MAX_SECTORS_KB=`cat $QUEUE/max_sectors_kb`
#         FIFO_BATCH=`cat $QUEUE/iosched/fifo_batch`
#         READ_EXPIRE=`cat $QUEUE/iosched/read_expire`
#         READA_EXPIRE=`cat $QUEUE/iosched/reada_expire`
#         WRITE_EXPIRE=`cat $QUEUE/iosched/write_expire`
#         WRITES_STARVED=`cat $QUEUE/iosched/writes_starved`
#         VFS_CACHE_PRESSURE=`cat /proc/sys/vm/vfs_cache_pressure`
#     done
# }

function setup_queue
{
    QUEUES=`echo /sys/block/*/queue`
    for QUEUE in $QUEUES
    do
        echo deadline   >   $QUEUE/scheduler
        echo 10240      >   $QUEUE/nr_requests
        echo 4096       >   $QUEUE/max_sectors_kb
        echo 10         >   $QUEUE/iosched/fifo_batch
        echo 0          >   $QUEUE/iosched/read_expire
        echo 120000     >   $QUEUE/iosched/reada_expire
        echo 120000     >   $QUEUE/iosched/write_expire
        echo 1000       >   $QUEUE/iosched/writes_starved
        echo 10         >   /proc/sys/vm/vfs_cache_pressure
    done
}

function reset_queue
{
    QUEUES=`echo /sys/block/*/queue`
    for QUEUE in $QUEUES
    do
        # [ -n "$SCHEDULER" ] && echo $SCHEDULER > $QUEUE/scheduler
        # $NR_REQUESTS
        # $MAX_SECTORS_KB
        # $FIFO_BATCH
        # $READ_EXPIRE
        # $READA_EXPIRE
        # $WRITE_EXPIRE
        # $WRITES_STARVED
        # $VFS_CACHE_PRESSURE

        echo 128        >   $QUEUE/nr_requests
        echo 100        >   $QUEUE/iosched/read_expire
        echo 3000       >   $QUEUE/iosched/write_expire
        echo 500        >   $QUEUE/iosched/writes_starved
    done

}

function preload
{
    [ ! -d "$task_root/preload" ] && return

    renice 19 $$
    
    files=`echo $task_root/preload/*`

    for file in $files
    do
        [ ! -f file ] && continue

        $RAFS file &
    done
}

function schedule_defrag()
{
    $FILECACHE --restore "$task_root/preload" \
					--delete "f.size > 500" \
					--dump "$task_root/defrag" 
}

function do_defrag()
{
	# prepare the defrag habitat dirs for each filesystem
	defrag_habitat=".defrag-habitat-$task"
	while read devfile mp fstype options
	do
        dfrag_dir="$mp/$defrag_habitat"

		if [ -d $dfrag_dir ]; then continue; fi
		if [ ! -b $devfile ]; then continue; fi

		if [ $fstype = "ext2" -o $fstype = "ext3" ]; then
			mount -o oldalloc,remount $mp
		fi

		mkdir $dfrag_dir

		if [ $fstype = "ext2" -o $fstype = "ext3" ]; then
			mount -o orlov,remount $mp
		fi
	done < /etc/mtab

	defrag_root="$CACHE_ROOT/$task/defrag"

	# ok, someone insists on doing the defrag...
	if [ ! -d $defrag_root ]; then
		[ $VERBOSE -gt 0 ] && echo "Preparing defrag task $task for immediate run..."
		schedule_defrag
	fi

	# do poor man's defrag
	$FILECACHE --restore "$defrag_root" \
					--defrag "$defrag_habitat"

	# cleanup the defrag root, or bootcache.sh will call us again and again!
	if [ $? -eq 0 ]; then
		rm -fr "$defrag_root"
	else
		rm -fr "$defrag_root.err"
		mv "$defrag_root" "$defrag_root.err"
	fi
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    preload)
        # save_queue
        trap "reset_queue; exit" EXIT HUP INT ABRT QUIT SEGV TERM
        setup_queue
        preload
        reset_queue
        ;;
    defrag)
        schedule_defrag
		[ $VERBOSE -gt 0 ] && echo "Defrag task $task scheduled, will run it on reboot/shutdown."
        ;;
    defrag-now)
		do_defrag
        ;;
    *)
        print_help
        ;;
esac

# vim: ts=4 sw=4
