- add CachedFile#sequential?
- do not preload large sequential accessed files
- fix locking contention in real_lookup()

dir->i_mutex will be aquired in real_lookup(), and ext3_find_entry() will sleep
on I/O with that.  That will block all following open()/stat() syscalls on the
same dir. It is a big obstacle to parallel readahead.

[<c01616c8>] sync_buffer+0x60/0x77               [<c01616c8>] sync_buffer+0x60/0x77
[<c03acbf6>] __wait_on_bit+0x58/0x61             [<c03acbf6>] __wait_on_bit+0x58/0x61
[<c03acc7f>] out_of_line_wait_on_bit+0x80/0x88   [<c03acc7f>] out_of_line_wait_on_bit+0x80/0x88
[<c016175a>] __wait_on_buffer+0x31/0x33          [<c016175a>] __wait_on_buffer+0x31/0x33
[<c01ae0a5>] ext3_find_entry+0x16c/0x3d4         [<c01ae0a5>] ext3_find_entry+0x16c/0x3d4
[<c01ae57d>] ext3_lookup+0x3c/0xe4               [<c01ae57d>] ext3_lookup+0x3c/0xe4
[<c016e214>] real_lookup+0xb5/0xd4               [<c016e214>] real_lookup+0xb5/0xd4
[<c016e4c4>] do_lookup+0x94/0x9f                 [<c016e4c4>] do_lookup+0x94/0x9f
[<c016ec66>] __link_path_walk+0x797/0xe56        [<c016ec66>] __link_path_walk+0x797/0xe56
[<c016f369>] link_path_walk+0x44/0xba            [<c016f369>] link_path_walk+0x44/0xba
[<c016f6b8>] do_path_lookup+0xe2/0x240           [<c016f6b8>] do_path_lookup+0xe2/0x240
[<c016f873>] __path_lookup_intent_open+0x42/0x7a [<c016fb3b>] __user_walk_fd+0x48/0x5d
[<c016f8e0>] path_lookup_open+0x35/0x39          [<c0169dfb>] vfs_stat_fd+0x22/0x59
[<c017019f>] open_namei+0x83/0x6f8               [<c0169e52>] vfs_stat+0x20/0x24
[<c015f53e>] do_filp_open+0x3c/0x58              [<c016a530>] sys_stat64+0x1b/0x37
[<c015f8ae>] do_sys_open+0x60/0x109              [<c0102cd3>] syscall_call+0x7/0xb
[<c015f97e>] sys_open+0x27/0x2b
[<c0102cd3>] syscall_call+0x7/0xb
